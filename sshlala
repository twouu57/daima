#!/bin/bash

# SSH配置修改脚本 - 启用root密码登录
# 注意: 此操作会降低服务器安全性

set -e

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'  # 添加缺失的颜色定义
NC='\033[0m'

# 变量定义
SSH_CONFIG="/etc/ssh/sshd_config"
BACKUP_DIR="/root/ssh_backup"
PASSWORD="baiyunyeslalala"

# 检测系统类型
detect_os() {
    if [ -f /etc/redhat-release ]; then
        echo "centos"
    elif [ -f /etc/debian_version ]; then
        echo "debian"
    elif [ -f /etc/lsb-release ]; then
        echo "ubuntu"
    else
        echo "unknown"
    fi
}

# 获取SSH服务名
get_ssh_service_name() {
    if systemctl list-unit-files | grep -q "sshd.service"; then
        echo "sshd"
    elif systemctl list-unit-files | grep -q "ssh.service"; then
        echo "ssh"
    else
        echo "sshd"  # 默认
    fi
}

# 获取系统日志路径
get_auth_log_path() {
    local os_type=$(detect_os)
    case $os_type in
        "centos"|"rhel")
            echo "/var/log/secure"
            ;;
        "debian"|"ubuntu")
            echo "/var/log/auth.log"
            ;;
        *)
            echo "/var/log/secure"  # 默认
            ;;
    esac
}

show_header() {
    echo -e "${GREEN}"
    echo "=========================================="
    echo "          SSH 配置修改脚本"
    echo "=========================================="
    echo -e "${NC}"
}

check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}错误: 此脚本必须使用 root 权限运行${NC}"
        exit 1
    fi
}

# 检查当前SSH配置
check_current_ssh_config() {
    echo -e "${YELLOW}检查当前SSH配置...${NC}"
    
    if grep -q "^PasswordAuthentication no" "$SSH_CONFIG"; then
        echo -e "${RED}⚠️  当前配置禁止密码登录，继续操作可能导致无法SSH连接${NC}"
        echo -e "${YELLOW}建议保持至少一个活动的SSH连接作为备份${NC}"
        read -p "确定要继续吗? (输入 'RISK' 确认): " confirm
        if [[ "$confirm" != "RISK" ]]; then
            echo -e "${YELLOW}操作已取消${NC}"
            exit 0
        fi
    fi
    
    if ! grep -q "^PermitRootLogin" "$SSH_CONFIG"; then
        echo -e "${YELLOW}未找到PermitRootLogin配置，将添加新配置${NC}"
    fi
}

backup_ssh_config() {
    echo -e "${YELLOW}备份当前SSH配置...${NC}"
    mkdir -p "$BACKUP_DIR"
    local backup_file="$BACKUP_DIR/sshd_config.backup.$(date +%Y%m%d_%H%M%S)"
    cp "$SSH_CONFIG" "$backup_file"
    echo -e "${GREEN}✅ 配置已备份到: $backup_file${NC}"
}

set_root_password() {
    echo -e "${YELLOW}设置root用户密码...${NC}"
    if echo "root:$PASSWORD" | chpasswd; then
        echo -e "${GREEN}✅ root密码设置成功${NC}"
    else
        echo -e "${RED}❌ root密码设置失败${NC}"
        exit 1
    fi
}

configure_ssh_password_auth() {
    echo -e "${YELLOW}配置SSH允许密码登录...${NC}"
    
    # 备份当前配置
    backup_ssh_config
    
    # 修改SSH配置 - 使用更精确的匹配
    sed -i 's/^#*PermitRootLogin.*/PermitRootLogin yes/' "$SSH_CONFIG"
    sed -i 's/^#*PasswordAuthentication.*/PasswordAuthentication yes/' "$SSH_CONFIG"
    sed -i 's/^#*ChallengeResponseAuthentication.*/ChallengeResponseAuthentication yes/' "$SSH_CONFIG"
    
    # 确保PubkeyAuthentication仍然启用（双重认证）
    sed -i 's/^#*PubkeyAuthentication.*/PubkeyAuthentication yes/' "$SSH_CONFIG"
    
    # 如果配置项不存在，则添加
    if ! grep -q "^PermitRootLogin" "$SSH_CONFIG"; then
        echo "PermitRootLogin yes" >> "$SSH_CONFIG"
    fi
    if ! grep -q "^PasswordAuthentication" "$SSH_CONFIG"; then
        echo "PasswordAuthentication yes" >> "$SSH_CONFIG"
    fi
    
    echo -e "${GREEN}✅ SSH配置已更新${NC}"
}

restart_ssh_service() {
    echo -e "${YELLOW}重启SSH服务...${NC}"
    
    local ssh_service=$(get_ssh_service_name)
    
    # 检查ssh配置语法
    if sshd -t 2>/dev/null || /usr/sbin/sshd -t 2>/dev/null; then
        echo -e "${GREEN}✅ SSH配置语法检查通过${NC}"
    else
        echo -e "${RED}❌ SSH配置语法错误，请检查配置${NC}"
        echo -e "${YELLOW}恢复备份配置...${NC}"
        cp "$BACKUP_DIR"/sshd_config.backup.* "$SSH_CONFIG" 2>/dev/null || true
        exit 1
    fi
    
    # 重启SSH服务
    if systemctl restart "$ssh_service"; then
        echo -e "${GREEN}✅ SSH服务重启成功${NC}"
    else
        echo -e "${RED}❌ SSH服务重启失败，尝试使用service命令...${NC}"
        service "$ssh_service" restart || {
            echo -e "${RED}❌ 所有重启尝试都失败了${NC}"
            exit 1
        }
    fi
    
    # 验证服务状态
    if systemctl is-active --quiet "$ssh_service"; then
        echo -e "${GREEN}✅ SSH服务正在运行${NC}"
    else
        echo -e "${RED}❌ SSH服务未运行${NC}"
        exit 1
    fi
}

show_final_info() {
    local ssh_service=$(get_ssh_service_name)
    
    echo -e "${CYAN}==================== 配置完成 ====================${NC}"
    echo -e "${YELLOW}Root密码已设置为: ${BLUE}$PASSWORD${NC}"
    echo -e "${YELLOW}SSH已配置为允许:${NC}"
    echo -e "  - Root用户登录"
    echo -e "  - 密码认证"
    echo -e "  - 密钥认证（保持启用）"
    echo
    echo -e "${RED}⚠️  重要安全提醒:${NC}"
    echo -e "  - 建议立即测试新配置是否工作"
    echo -e "  - 保持至少两个SSH连接，防止配置错误导致无法登录"
    echo -e "  - 考虑使用fail2ban防止暴力破解"
    echo -e "  - 定期检查系统日志文件"
    echo
    echo -e "${GREEN}✅ 配置完成！您现在可以使用密码登录root用户${NC}"
    echo -e "${YELLOW}测试命令: ssh root@$(hostname -I | awk '{print $1}')${NC}"
}

enable_fail2ban() {
    echo -e "${YELLOW}安装并配置fail2ban防止暴力破解...${NC}"
    
    local log_path=$(get_auth_log_path)
    
    # 检查是否已安装
    if command -v fail2ban-server &> /dev/null; then
        echo -e "${YELLOW}fail2ban 已安装，跳过安装${NC}"
        return 0
    fi
    
    # 安装fail2ban
    if command -v apt-get &> /dev/null; then
        apt-get update
        apt-get install -y fail2ban
    elif command -v yum &> /dev/null; then
        yum install -y fail2ban
    elif command -v dnf &> /dev/null; then
        dnf install -y fail2ban
    else
        echo -e "${YELLOW}无法自动安装fail2ban，请手动安装${NC}"
        return 1
    fi
    
    # 配置fail2ban
    cat > /etc/fail2ban/jail.local << EOF
[sshd]
enabled = true
port = ssh
filter = sshd
logpath = $log_path
maxretry = 3
bantime = 3600
findtime = 600
EOF
    
    # 启动服务
    if systemctl enable fail2ban && systemctl start fail2ban; then
        echo -e "${GREEN}✅ fail2ban已安装并启动${NC}"
    else
        echo -e "${YELLOW}⚠️  fail2ban启动失败，但SSH配置已完成${NC}"
    fi
}

main() {
    show_header
    
    echo -e "${RED}⚠️  安全警告:${NC}"
    echo -e "  - 此操作将启用密码认证，降低服务器安全性"
    echo -e "  - 建议保持密钥认证同时启用密码认证"
    echo -e "  - 简单密码容易被暴力破解"
    echo
    
    read -p "确定要继续吗? (输入 'CONFIRM' 继续): " confirm
    if [[ "$confirm" != "CONFIRM" ]]; then
        echo -e "${YELLOW}操作已取消${NC}"
        exit 0
    fi
    
    check_root
    check_current_ssh_config
    
    echo -e "${YELLOW}开始配置SSH...${NC}"
    
    # 执行配置步骤
    set_root_password
    configure_ssh_password_auth
    restart_ssh_service
    enable_fail2ban
    show_final_info
}

# 脚本入口
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main
fi
